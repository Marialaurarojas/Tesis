/// este codigo va en el arduino y genera la señal con el AD9833, recibe una señal analogica rectificada, envia los valores de frecuencia y voltaje a la computadora,
///descarga el capacitador , aumenta la frecuencia en 0.004hx y vuelve a empezar



#include <SPI.h>
#include <MD_AD9833.h> // Asegúrate de instalar una librería AD9833( MD_AD9833 by majicDesigns)

// Pines para el AD9833
const uint8_t PIN_DATA = 11; ///< SPI Data pin number
const uint8_t PIN_CLK = 13;  ///< SPI Clock pin number
const uint8_t PIN_FSYNC = 10; ///< SPI Load pin number (FSYNC in AD9833 usage)

MD_AD9833 AD(PIN_FSYNC); // Hardware SPI


// Frecuencia inicial y final
float f = 1000.0; // Frecuencia inicial en Hz
float f_final = 5000.0; // Frecuencia final en Hz

// Incremento de frecuencia
float f_inc = 0.004; // Incremento de frecuencia en Hz, la resolución de frecuencia de AD9833

// Configuración de pines
const int pinVoltaje = A0;
const int pinTransistor = 2;

void setup() {
  // Inicializar comunicación serial
  Serial.begin(115200);

// Inicializar el AD9833
  AD.begin();
  AD.reset();
//  configura el transistor
  pinMode(pinTransistor, OUTPUT);
  digitalWrite(pinTransistor, HIGH); // Transistor apagado

}

void loop() {
  while (f < f_final) {
  // Genera la señal con el AD9833
    AD.setFrequency(MD_AD9833::CHAN_0, f);


  // Espera un momento para que se estabilice la señal
    delay(100);

  // Lee el voltaje
    int lecturaAnalogica = analogRead(pinVoltaje);
    float voltaje = lecturaAnalogica * (5.0 / 1023.0); // Convierte a voltaje

  // Envía los datos por el puerto serie
    Serial.print(f);
    Serial.print(",");
    Serial.println(voltaje);

  // Descarga el capacitor
    digitalWrite(pinTransistor, LOW);
    delay(50); // Tiempo de descarga
    digitalWrite(pinTransistor, HIGH);

  // Incrementa la frecuencia
    f += f_inc;

  // Espera un momento antes de la siguiente iteración
    delay(100);
  }
  while(true); // Detener la ejecución indefinidamente
}
